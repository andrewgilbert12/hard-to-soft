// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }

        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }
        let length = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) { // if maxLen == 0 we didnt declare an array for chars
            do chars.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (length - 1)) {
            do Sys.error(15);
        }

        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > (length - 1)) {
            do Sys.error(16);
            return;
        }

        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLen) {
            let chars[length] = c;
            let length = length + 1;
        } else {
            do Sys.error(17);
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
            return;
        }

        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, place;
        var char c;
        var boolean minus;

        if (charAt(0) = 45) {
            // minus sign
            let i = 1; // advance start index past minus sign
            let minus = true;
        } else {
            let i = 0;
            let minus = false;
        }

        let val = 0;

        while (i < length) {
            let c = charAt(i);
            if ((c < 48) | (c > 57)) {
                return val; // non-digit char
            } 
            let val = (val * 10) + charAt(i) - 48;
            let i = i + 1;
        }

        if (minus) {
            return -val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val = (-32767-1)) {
            // special case: -32768
            if (maxLen < 6) {
                do Sys.error(19);
                return;
            }
            do appendChar(45); // minus sign
            do appendChar(51); // 3
            do appendChar(50); // 2
            do appendChar(55); // 7
            do appendChar(54); // 6
            do appendChar(56); // 8
            return;
        }

        if (val < 0) {
            if (maxLen < 1) {
                do Sys.error(19);
                return;
            }

            do appendChar(45); // minus sign
            let val = -val;
        }

        do _setInt(val);
        return;
    }

    /* helper for setInt, invariant: val >= 0 */
    method void _setInt(int val) {
        var int div, mod;
        do Output.printInt(val);
        let div = val / 10;
        let mod = val - (div * 10); // val % 10

        if (val > 9) {
            do _setInt(div);
        }

        if ((maxLen - length) < 1) {
            // out of space
            do Sys.error(19);
            return;
        }

        do appendChar(48 + mod);

        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
