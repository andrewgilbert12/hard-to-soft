// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int min_address, x_len, y_len, max_x, max_y, max_address;

    /** Initializes the Screen. */
    function void init() {
        let color = true; // set to black at beginning
        let min_address = 16384; // starting memory address of screen block
        let x_len = 512 / 16;
        let max_x = 511;
        let y_len = 256;
        let max_y = 255;
        let max_address = 24576; // ending address of screen block
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr;
        do Screen.setColor(false);
        let addr = min_address;
        while (addr < max_address) {
          do Memory.poke(addr, 0);
          let addr = addr + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int x_byte, bit, address, val, bitmap;
  
        // Any attempt to draw a pixel offscreen results in an error.
        if ((x < 0) | (y < 0) | (x > max_x) | (y > max_y)) {
            do Sys.error(7);
            return; 
        }

        let x_byte = x / 16;
        let bit = x - (x_byte * 16); // x % 16
        let address = min_address + (y * x_len) + x_byte; 

        let val = Memory.peek(address); 

        let bitmap = 1;

        while (bit > 0) {
            let bitmap = bitmap + bitmap;
            let bit = bit - 1;
        }

        if (color) {
            // black
            do Memory.poke(address, val | bitmap);
        } else {
            // white
            do Memory.poke(address, val & (~bitmap));
        }
  
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int swap, dx, dy, diff, x, y;

        // Either endpoint of the line being offscreen results in an error.
        if ((x1 < 0) | (y1 < 0) | (x1 > max_x) | (y1 > max_y) |
            (x2 < 0) | (y2 < 0) | (x2 > max_x) | (y2 > max_y)){
            do Sys.error(8);
            return; 
        }

        if (x1 = x2) {
          let y = Math.min(y1,y2);
          let dy = Math.max(y1,y2);
          while (y < (dy + 1)) {
            do Screen.drawPixel(x1, y);
            let y = y + 1;
          }
          return;
        }

        if (y1 = y2) {
          let x = Math.min(x1,x2);
          let dx = Math.max(x1,x2);
          while (x < (dx + 1)) {
            do Screen.drawPixel(x, y1);
            let x = x + 1;
          }
          return;
        }

        if (x1 > x2) {
            let swap = x1;
            let x1 = x2;
            let x2 = swap;
            let swap = y1;
            let y1 = y2;
            let y2 = swap;
        } 

        let dx = x2 - x1; let dy = y2 - y1; 
        let x = x1; let y = y1;
        let diff = 0;

        if (dy < 0) { 
            while ((x < (x2 + 1)) | (y > (y2 - 1))) {
                do Screen.drawPixel(x,y);
                if (diff > 0) {
                    let y = y - 1;
                    let diff = diff - dx;
                } else {
                    let x = x + 1;
                    let diff = diff - dy;
                }
            }
        } else {
            while ((x < (x2 + 1)) | (y < (y2 + 1))) {
                do Screen.drawPixel(x,y);
                if (diff < 0) {
                    let y = y + 1;
                    let diff = diff + dx;
                } else {
                    let x = x + 1;
                    let diff = diff - dy;
                }
            }
        }    
return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x;

        // Any vertex of the rectangle being offscreen results in an error.
        if ((x1 > x2) | (y1 > y2) |
            (x1 < 0) | (y1 < 0) | (x1 > max_x) | (y1 > max_y) |
            (x2 < 0) | (y2 < 0) | (x2 > max_x) | (y2 > max_y)){
            do Sys.error(9);
            return; 
        }

        let x = x1;
        while (x < (x2 + 1)) {
            do Screen.drawLine(x,y1,x,y2);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int a, d, curr_y;

        // If the center of the circle is offscreen, results in an error.
        if ((x < 0) | (y < 0) | (x > max_x) | (y > max_y)){
            do Sys.error(12);
            return; 
        }

        if (r > 181) {
            do Sys.error(13);
            return; 
        }

        let a = -r; 
        while (a < (r + 1)) {
            let d = Math.sqrt((r * r) - (a * a));
            let curr_y = y + a;
            // TODO: currently any circle with any points offscreen will crash the computer.
            // it is not specified in the OS library documentation whether this is desirable.
            // we can draw circles that get cut off by the edge of the screen if we add bounds checking here.
            do Screen.drawLine(x - d, curr_y, x + d, curr_y);
            let a = a + 1;
        }

        return;
    }
}
